/*
  Buttercup compiler - Common Intermediate Language (CIL) code generator.
  Copyright (C) 2013 Ariel Ortiz, ITESM CEM
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
using System.Linq;

namespace DeepLingo {

    class CILGenerator {
        public IDictionary<string, Function> globalFunctions;
        public IDictionary<string, Variable> globalVariables;
        
        private string currentFunction;
        private string loopExit;
        int labelCounter = 1;
        
        static readonly IDictionary<string, int> en = new Dictionary<string, int>() {
                { "\\n", 10},
                { "\\r", 13},
                { "\\t", 9},
                { "\\", 92},
                { "\\'", 39},
                { "\\\"", 34},
                
            };
        public string VisitChildren (dynamic node) {
            
            string ret = "";
            foreach (var child in node.children) {
                // Console.WriteLine(child.GetType());
                ret += Visit ((dynamic) child);
            }
            return ret;
        }
        //-----------------------------------------------------------
        private string GenerateLabel () {
            return String.Format ("${0:000000}", labelCounter++);
        }


        public string Capitalize(string word)
        {
            return word.Substring(0, 1).ToUpper() + word.Substring(1).ToLower();
        }
        public CILGenerator (IDictionary<string, Function> functions, IDictionary<string, Variable> variables) {
            this.globalFunctions = functions;
            this.globalVariables = variables;

        }

        public String tab (int n) {
            string tabs = "";
            for (int i = 0; i < n; i++) {
                tabs += "\t";
            }
            return tabs;
        }

        public string Visit (Empty node) {
            return "";
        }

        public string StaticFields(){
            string st = "";
            foreach(var v in globalVariables.Keys){
                st += "\t.field private int32 " + v + "\n";
            }
            return st;

        }

        public int getCode(string code){
            int codePoint = 0;
            try{
                codePoint = (int)Convert.ToInt64(code, 16);
            }
            catch(Exception e){
                Console.WriteLine("Could not convert "+code+" hex to character, using 0: " + e);
            }
            return codePoint;
        }

        public string Visit (Prog node) {
            return "// Code generated by the deeplingo compiler.\n\n" +
                ".assembly 'deeplingo' {}\n\n" +
                ".assembly extern deeplingolib {}\n\n" +
                ".class public auto ansi beforefieldinit  DeepLingoProgram extends ['mscorlib']'System'.'Object' {\n" +
                StaticFields()+
                VisitChildren (node) +
                "}\n";
        }

        public string Visit (FunctionDefinition node) {
            currentFunction = node.AnchorToken.Lexeme;
            var st = $"// Start {node.GetType()} \n";            
            st += tab(1)+".method private static int32 "+node.AnchorToken.Lexeme+"(";
            var paramArray = globalFunctions[currentFunction].localVariables.Where(m => m.Value.isParameter == true).ToArray();
            for (int i = 0; i < paramArray.Length; i++)
            {
                if(i != paramArray.Length-1){
                    st+= $"int32 {paramArray[i].Key},";
                } else {
                    st += $"int32 {paramArray[i].Key}";
                }
            }
            st+=") cil managed{\n";
            if (node.AnchorToken.Lexeme == "main") { st += tab(2)+".entrypoint\n";}
            st += tab(2)+".maxstack 8\n";
            st += VisitChildren(node);
            st += tab(2)+"ldc.i4.0\n";            
            st += tab(2)+"ret\n";
            st += tab(1)+"}\n";
            currentFunction = null;
            return st;
        }

        public string Visit (Identifier node) {
            if(currentFunction != null && globalFunctions[currentFunction].localVariables[node.AnchorToken.Lexeme].isParameter){
               return "\t\tldarg "
                + node.AnchorToken.Lexeme 
                + "\n"; 
            } else{
                return "\t\tldloc "
                + node.AnchorToken.Lexeme 
                + "\n";
            }
        }

        public string Visit (GlobalVariableList node) {
            return "";
        }

        public string Visit (VariableList node) {
            var stringo = $"// Start {node.GetType()} \n";
            
            stringo += "\t\t.locals init (\n";
            for (int i = 0; i < node.children.Count; i++) {
                stringo += $"\t\t\t[{i}] int32 {node.children[i].AnchorToken.Lexeme}";
                stringo += i == node.children.Count-1 ? "\n" : ",\n";
            }
            stringo += "\t\t)\n\n";
            return stringo;
        }

        public string Visit (ParameterList node) {
            var stringo = $"// Start {node.GetType()} \n";
            return "";
            // Console.WriteLine(node.AnchorToken.ToString());
        }

        public string Visit (If node) {
            string st = $"// Start {node.GetType()} \n";
            
            var elseBody = GenerateLabel();
            var savedEndif = loopExit;
            loopExit = GenerateLabel();

            st += Visit((dynamic) node[0]);
            st += "\t\tldc.i4 42\n";
            st += "\t\tbne.un "+ elseBody + "\n";
            st += Visit((dynamic) node[1]);
            st += "\t\tbr "+loopExit+"\n";
            st += "\t\t'"+elseBody+"':\n";
            if(node[2].children.Count > 0){
                st += Visit((dynamic) node[2]);
            }
            if(node[3].children.Count > 0){
                st += Visit((dynamic) node[3]);
            }
            st += $"{loopExit}:";
            st += $"// End {node.GetType()} \n";     
            loopExit = savedEndif;
            return st;
        }

        public string Visit (Loop node) {
            var st = $"// Start {node.GetType()} \n";
            
            string label1 = GenerateLabel();
            
            loopExit = GenerateLabel();
            st += tab(1)+label1+":\n";
            st += VisitChildren(node);
            st += "\t\tbr " + label1 + "\n";
            st += tab(1)+loopExit + ":\n";
            var arr = node.children.Skip(1).ToArray();
            foreach (var child in arr) {
                // Console.WriteLine(child.GetType());
                st += Visit ((dynamic) child);
            }
            st += $"// End {node.GetType()} \n";
            return st;          
        }

        public string Visit (Break node) {
            
            return "\t\tbr " + loopExit + "\n";
        }

        public string Visit (Assignment node) {
            
                return Visit((dynamic) node[0]) 
                + "\t\tstloc " 
                + node.AnchorToken.Lexeme 
                + "\n";
        }

        public string Visit (Expression node) {

            return VisitChildren(node);
        }

        public string Visit (ExpressionUnary node) {
            return VisitChildren(node);
        }

        public string Visit (Array node) {

            return "";
        }

        public string Visit (OperatorBool node) {

            return "";
        }

        public string Visit (OperatorComp node) {

            return "";
        }

        public string Visit (OperatorMath node) {

            return "";
        }


        public string Visit (FunctionCall node) {
            string st = $"// Start {node.GetType()} \n";
            
            st+= VisitChildren(node);
            if(globalFunctions[node.AnchorToken.Lexeme].isPredefinedFunction){
                st += tab(2)+"call int32 class ['deeplingolib']'DeepLingo'."
                + "'Utils'::'"+Capitalize(node.AnchorToken.Lexeme)+"'";
            } else {
                st += tab(2)+"call int32 class DeepLingoProgram::"+node.AnchorToken.Lexeme;
            }
            st+= "(";
            // Console.WriteLine($"The count is {node.children.Count}");
            for (int i = 0; i < node.children.Count; i++)
            {
                if(i != node.children.Count-1){
                    st+= "int32,";
                } else {
                    st += "int32";
                }
            }
            st += ")\n";
            if(node.AnchorToken.Lexeme.Contains("print")){st += tab(2)+"pop\n";}
            return st;
        }

        public string Visit (StatementList node) {
            return VisitChildren(node);
        }
        public string Visit (Statement node) {

            return VisitChildren(node);
        }
        public string Visit (ElseIfList node) {
            

            return VisitChildren(node);
        }
        public string Visit (ElseIf node) {
            
            string st = "";
            var ifLabel = GenerateLabel();
            st += Visit((dynamic) node[0]);
            st += "\t\tldc.i4 42\n";
            st += "\t\tbne.un "+ ifLabel + "\n";
            st += Visit((dynamic) node[1]);
            st += "\t\t"+ifLabel+":\n";
            return st;
        }
        public string Visit (Else node) {
            return VisitChildren(node);
        }
        public string Visit (Literal node) {

            return "";
        }
        public string Visit (Operator node) {

            return "";
        }
        public string Visit (Return node) {
            var st = "";
            if(node.children.Count == 0){
                st += "\t\tldc.i4.0\n";
            } else {
                st += VisitChildren(node);
            }
            st += "\t\tret\n";
            return st;
        }
        public string Visit (Increment node) {
            var st = $"// Start {node.GetType()} \n";
            if(currentFunction != null && globalFunctions[currentFunction].localVariables[node.AnchorToken.Lexeme].isParameter){
                st += "\t\tldarg " + node.AnchorToken.Lexeme + "\n"; 
            } else{
                st += "\t\tldloc " + node.AnchorToken.Lexeme + "\n";
            }
            st += "\t\tldc.i4.1\n";
            st += "\t\tadd.ovf\n";
            if(currentFunction != null && globalFunctions[currentFunction].localVariables[node.AnchorToken.Lexeme].isParameter){
                st += "\t\tstarg " + node.AnchorToken.Lexeme + "\n"; 
            } else{
                st += "\t\tstloc " + node.AnchorToken.Lexeme + "\n";
            }
            st += $"// End {node.GetType()} \n";
            
            return st;
        }
        public string Visit (Decrement node) {
            var st = $"// Start {node.GetType()} \n";
            if(currentFunction != null && globalFunctions[currentFunction].localVariables[node.AnchorToken.Lexeme].isParameter){
                st += "\t\tldarg " + node.AnchorToken.Lexeme + "\n"; 
            } else{
                st += "\t\tldloc " + node.AnchorToken.Lexeme + "\n";
            }
            st += VisitChildren(node);
            st += "\t\tldc.i4.1\n";
            st += "\t\tsub.ovf\n";
            if(currentFunction != null && globalFunctions[currentFunction].localVariables[node.AnchorToken.Lexeme].isParameter){
                st += "\t\tstarg " + node.AnchorToken.Lexeme + "\n"; 
            } else{
                st += "\t\tstloc " + node.AnchorToken.Lexeme + "\n";
            }            
            st += $"// End {node.GetType()} \n";
            return st;
        }
        public string Visit (Positive node) {
            return "";
        }

        public string Visit (Negative node) {
            string st = "";
            var labelFirst = GenerateLabel();
            var labelSecond = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"ldc.i4 42\n";
            st += tab(2)+"bne.un "+labelFirst+"\n"; 
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelSecond+"\n";                        
            st += tab(1)+labelFirst+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelSecond+":\n";
            return st;
        }

        public string Visit (Not node) {
            return "DEPRECATED";
        }

        public string Visit (True node) {

            return "\t\tldc.i4 42\n";
        }

        //Array

        //Operator Math
        public string Visit (Sum node) {

            string st = $"// Start {node.GetType()} \n";
            st += VisitChildren(node);
            st += "\t\tadd.ovf\n";
            return st;
        }
        public string Visit (Sub node) {

            string st = $"// Start {node.GetType()} \n";
            st += VisitChildren(node);
            st += "\t\tsub.ovf\n";
            return st;
        }
        public string Visit (Div node) {

            string st = $"// Start {node.GetType()} \n";
            st += VisitChildren(node);
            st += "\t\tdiv.ovf\n";
            return st;
        }
        public string Visit (Mul node) {
            string st = $"// Start {node.GetType()} \n";
            st += VisitChildren(node);
            st += "\t\tmul.ovf\n";
            return st;
        }
        public string Visit (Mod node) {
            string st = $"// Start {node.GetType()} \n";
            st += VisitChildren(node);
            st += "\t\trem.ovf\n";
            return st;
        }
        // Operator Comp
        public string Visit (Gt node) {
            var st = "";
            var labelOne = GenerateLabel();
            var labelTwo = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"ble.un "+labelOne+"\n";
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelTwo+"\n";                        
            st += tab(1)+labelOne+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelTwo+":\n";
            return st;
        }
        public string Visit (Goet node) {

            var st = "";
            var labelOne = GenerateLabel();
            var labelTwo = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"ble.un "+labelOne+"\n";
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelTwo+"\n";                        
            st += tab(1)+labelOne+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelTwo+":\n";
            return st;
        }
        public string Visit (Lt node) {

            var st = "";
            var labelOne = GenerateLabel();
            var labelTwo = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"bge.un "+labelOne+"\n";
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelTwo+"\n";                        
            st += tab(1)+labelOne+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelTwo+":\n";
            return st;
        }
        public string Visit (Loet node) {
            var st = "";
            var labelOne = GenerateLabel();
            var labelTwo = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"bgt.un "+labelOne+"\n";
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelTwo+"\n";                        
            st += tab(1)+labelOne+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelTwo+":\n";
            return st;
        }
        public string Visit (Equals node) {
            var st = "";
            var labelOne = GenerateLabel();
            var labelTwo = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"bne.un "+labelOne+"\n";
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelTwo+"\n";                        
            st += tab(1)+labelOne+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelTwo+":\n";
            return st;
        }
        public string Visit (Not_Equals node) {
            var st = "";
            var labelOne = GenerateLabel();
            var labelTwo = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"beq.s "+labelOne+"\n";
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelTwo+"\n";                        
            st += tab(1)+labelOne+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelTwo+":\n";
            return st;
        }

        // Operator Bool
        public string Visit (Or node) {
            string st = "";
            var labelFirst = GenerateLabel();
            var labelSecond = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"ldc.i4 42\n";
            st += tab(2)+"beq.s "+labelFirst+"\n"; 
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelSecond+"\n";                        
            st += tab(1)+labelFirst+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelSecond+":\n";
            return st;
            
        }
        public string Visit (And node) {
            string st = "";
            var labelFirst = GenerateLabel();
            var labelSecond = GenerateLabel();
            st += VisitChildren(node);
            st += tab(2)+"ldc.i4 42\n";
            st += tab(2)+"beq.s "+labelFirst+"\n"; 
            st += tab(2)+"ldc.i4.0\n";
            st += tab(2)+"br "+labelSecond+"\n";                        
            st += tab(1)+labelFirst+":\n";
            st += tab(2)+"ldc.i4 42\n";
            st += tab(1)+labelSecond+":\n";
            return st;
        }

        //Literals
        public string Visit(VarInt node) => tab(2)+"ldc.i4 "+ node.AnchorToken.Lexeme+"\n";
        public string Visit (VarChar node) {
            return "ldc.i4 "+ ((int)node.AnchorToken.Lexeme[0]).ToString();
        }
        public string Visit (VarString node){
            var v = node.AnchorToken.Lexeme;
			var sz = v.Length;
            var st = "";
            st += "\t\tldc.i4 "+ sz + "\n";
            st += "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'New'(int32)\n";

            // st +=  tab(2) + "ldstr "+node.AnchorToken.Lexeme+"\n";
            // st += tab(2) + "call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Conv'(string)\n";
            for(var i = 1;i<sz-1;i++){
				var intAdded = (int)v[i];
				if(i+1<sz-1 && en.ContainsKey(v.Substring(i,2))){
                    intAdded = en[v.Substring(i,2)];
					i += 1;
				}
				else if(i+7<sz-1 && v.Substring(i,2) == @"\u"){
					intAdded = getCode(v.Substring(i+2,6));
					i += 7;
				}
				st += "\t\tdup\n";
				st += "\t\tldc.i4 "+ intAdded + "\n";
				st += "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Add'(int32,int32)\n";
				st += "\t\tpop\n";	
			}
            return st;
        }
    }
}