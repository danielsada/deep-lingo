/*
  Buttercup compiler - Common Intermediate Language (CIL) code generator.
  Copyright (C) 2013 Ariel Ortiz, ITESM CEM
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace DeepLingo {

    class CILGenerator {
        public IDictionary<string, Function> globalFunctions;
        public IDictionary<string, Variable> globalVariables;

        int labelCounter = 0;

        public string VisitChildren (dynamic node) {
            
            string ret = "";
            foreach (var child in node.children) {
                // Console.WriteLine(child.GetType());
                ret += Visit ((dynamic) child);
            }
            return ret;
        }
        //-----------------------------------------------------------
        string GenerateLabel () {
            return String.Format ("${0:000000}", labelCounter++);
        }

        public CILGenerator (IDictionary<string, Function> functions, IDictionary<string, Variable> variables) {
            this.globalFunctions = functions;
            this.globalVariables = variables;

        }

        public String tab (int n) {
            string tabs = "";
            for (int i = 0; i < n; i++) {
                tabs += "\t";
            }
            return tabs;
        }

        public string Visit (Empty node) {

            return "";
        }

        public string Visit (Prog node) {
            return "// Code generated by the deeplingo compiler.\n\n" +
                ".assembly 'deeplingo' {}\n\n" +
                ".assembly extern deeplingolib {}\n\n" +
                ".class public 'DeepLingoProgram' extends ['mscorlib']'System'.'Object' {\n" +
                VisitChildren (node) +
                "}\n";
        }

        // public string Visit (GlobalVariableDefinition node) {
        //     return "";
        // }

        // public string Visit (VariableDefinition node) {
        //     return "";
        // }

        public string Visit (FunctionDefinition node) {
            var st = ".method private hidebysig static void "+node.AnchorToken.Lexeme+"(string[] args) cil managed{\n";
            st += ".entrypoint\n";
            st += VisitChildren(node);
            st += "}";
            return st;
        }

        public string Visit (Identifier node) {

            return "";
        }

        public string Visit (GlobalVariableList node) {
            var stringo = "\n";
            for (int i = 0; i < node.children.Count; i++) {
                stringo += $"\t.field private static int32 {node.children[i].AnchorToken.Lexeme}";
                stringo += i == node.children.Count-1 ? "\n" : ",\n";
            }
            return stringo;
        }

        public string Visit (VariableList node) {
            var stringo = ".locals init (\n";
            for (int i = 0; i < node.children.Count; i++) {
                stringo += $"\t\t[{i}] int32 {node.children[i].AnchorToken.Lexeme}";
                stringo += i == node.children.Count-1 ? "\n" : ",\n";
            }
            stringo += ")\n\n";
            return stringo;
        }

        public string Visit (ParameterList node) {

            return "";
        }

        public string Visit (If node) {

            return "";
        }

        public string Visit (Loop node) {

            return "";
        }

        public string Visit (Break node) {

            return "";
        }

        public string Visit (Assignment node) {

            return "";
        }

        public string Visit (Expression node) {

            return "";
        }

        public string Visit (ExpressionUnary node) {

            return "";
        }

        public string Visit (Array node) {

            return "";
        }

        public string Visit (OperatorBool node) {

            return "";
        }

        public string Visit (OperatorComp node) {

            return "";
        }

        public string Visit (OperatorMath node) {

            return "";
        }


        public string Visit (FunctionCall node) {
            var x = @"ldc.i4.0";
            return "";
        }

        public string Visit (StatementList node) {

            return "";
        }
        public string Visit (Statement node) {

            return "";
        }
        public string Visit (ElseIfList node) {

            return "";
        }
        public string Visit (ElseIf node) {

            return "";
        }
        public string Visit (Else node) {

            return "";
        }
        public string Visit (Literal node) {

            return "";
        }
        public string Visit (Operator node) {

            return "";
        }
        public string Visit (Return node) {

            return "";
        }
        public string Visit (Increment node) {

            return "";
        }
        public string Visit (Decrement node) {

            return "";
        }
        public string Visit (Positive node) {

            return "";
        }

        public string Visit (Negative node) {

            return "";
        }

        public string Visit (Not node) {

            return "";
        }

        public string Visit (True node) {

            return "";
        }

        //Array

        //Operator Math
        public string Visit (Sum node) {

            return "";
        }
        public string Visit (Sub node) {

            return "";
        }
        public string Visit (Div node) {

            return "";
        }
        public string Visit (Mul node) {

            return "";
        }
        public string Visit (Mod node) {

            return "";
        }
        // Operator Comp
        public string Visit (Gt node) {

            return "";
        }
        public string Visit (Goet node) {

            return "";
        }
        public string Visit (Lt node) {

            return "";
        }
        public string Visit (Loet node) {

            return "";
        }
        public string Visit (Equals node) {

            return "";
        }
        public string Visit (Not_Equals node) {

            return "";
        }

        // Operator Bool
        public string Visit (Or node) {

            return "";
        }
        public string Visit (And node) {

            return "";
        }

        //Literals
        public string Visit (VarInt node) {

            return "";
        }
        public string Visit (VarChar node) {

            return "";
        }
        public string Visit (VarString node) {

            return "";
        }
    }
}